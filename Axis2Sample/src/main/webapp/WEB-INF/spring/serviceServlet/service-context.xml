<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/" />

	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" > 
	
		<property name="useNotAcceptableStatusCode" value="true"/>
		<!-- 		
		    **********************************************************************************
			 Don't need to specify mediaTypes property since we are not using file extensions 
			 in the url. Accept header will be looked at instead. 
		 	**********************************************************************************
		-->
			
		<property name="viewResolvers"> 
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
				<!-- *****************************************************************
					 This will map view resolution to the MarshallingView below who's name will be
					 passed as the logical view name from the method handler  
				     *****************************************************************-->				
			</list>
		</property>
		
	</bean>

	<bean id="resultTemplate" class="org.springframework.web.servlet.view.xml.MarshallingView">					
		<constructor-arg>
			<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
				<property name="classesToBeBound">
					<list>
						<value>com.prospring3.axis2.domain.ResultData</value>
					</list>
				</property>
			</bean>
		</constructor-arg>	
	</bean>
	

	<context:component-scan base-package="com.prospring3.axis2" />

</beans>
